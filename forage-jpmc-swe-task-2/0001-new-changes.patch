From dff875bbdefbb8ef5ca4e758c904bc98280ab61f Mon Sep 17 00:00:00 2001
From: himansh9812 <himanshum9812@gmail.com>
Date: Thu, 19 Sep 2024 20:27:34 +0530
Subject: [PATCH] new changes

---
 src/App.tsx   | 27 ++++++++++++++++++++-------
 src/Graph.tsx | 12 +++++++++---
 2 files changed, 29 insertions(+), 10 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..5c0b2f2 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -2,12 +2,15 @@ import React, { Component } from 'react';
 import DataStreamer, { ServerRespond } from './DataStreamer';
 import Graph from './Graph';
 import './App.css';
+import { setInterval } from 'timers';
+import { ServerResponse } from 'http';
 
 /**
  * State declaration for <App />
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean
 }
 
 /**
@@ -22,6 +25,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false
     };
   }
 
@@ -29,19 +33,28 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph)
+      return (<Graph data={this.state.data}/>)
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
-  }
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
+  }  
 
   /**
    * Render the App react component
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..bd9de83 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -41,7 +41,7 @@ class Graph extends Component<IProps, {}> {
       timestamp: 'date',
     };
 
-    if (window.perspective && window.perspective.worker()) {
+    if (window.perspective ) {
       this.table = window.perspective.worker().table(schema);
     }
     if (this.table) {
@@ -49,6 +49,12 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', 'top_ask_price');
+      elem.setAttribute('aggregates', '{"stock":"distinct count", "top_ask_price" : "avg", "top_bid_price": "avg", "timestamp": "distinct count"}');
+
     }
   }
 
-- 
2.44.0.windows.1

